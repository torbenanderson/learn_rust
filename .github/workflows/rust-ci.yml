# Rust CI/CD Pipeline for Learn Rust Projects
# This workflow ensures code quality and security across all Rust learning projects
name: Rust CI

# Trigger conditions: Run on pushes to main branch and pull requests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define the build job
jobs:
  build:
    # Use Ubuntu latest for consistent development environment (works better with M1 Max)
    runs-on: ubuntu-latest
    if: github.repository_owner != 'geminiduplication'  # Exclude the specified organization
    
    # Sequential steps to validate code quality
    steps:
      # Step 1: Set up the GitHub Actions environment with PTA
      - name: Checkout code
        uses: actions/checkout@v4  # Check out the repository code
        with:
          # Use PTA for enhanced permissions (optional - only needed for private repos or special permissions)
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 2: Set up Rust toolchain (official GitHub action)
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      
      # Step 3: Install security auditing tool
      - name: Install cargo-audit
        run: cargo install cargo-audit  # Scans dependencies for known vulnerabilities
      
      # Step 4: Compile all Rust projects to check for compilation errors
      - name: Build
        run: cargo build --verbose  # Verbose output for detailed error reporting
      
      # Step 5: Run all unit tests to ensure code functionality
      - name: Test
        run: cargo test --verbose  # Verbose output shows which tests pass/fail
      
      # Step 6: Run Clippy linter to enforce Rust best practices
      - name: Clippy
        run: cargo clippy --verbose -- -D warnings  # Treat warnings as errors for strict quality
      
      # Step 7: Security audit of dependencies
      - name: Audit
        run: cargo audit  # Check for known security vulnerabilities in dependencies
      
      # Step 8: Example of using PTA for additional operations (optional)
      - name: Example PTA usage
        if: false  # Disabled by default - enable when needed
        run: |
          # Example: Use PTA for GitHub API calls or other authenticated operations
          echo "Using PTA for enhanced permissions"
          # curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          #      -H "Accept: application/vnd.github.v3+json" \
          #      https://api.github.com/repos/${{ github.repository }}/issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 